#include <MovingAverage.h>
MovingAverage<float> avrVpp(5, 0);

const int adcPin = 35;
const int button = 21;
const int ledPin = 2;

const int vppBuffSize = 25;
int adcValues[vppBuffSize];
const int edgeBuffSize = 10;
float vppBuffer[edgeBuffSize];

int currentIndex = 0, bufferIndex;
bool accumulateAreaFlag = false;    
double accumulatedArea, trainnedArea;  //// should save to sd
float autoModeTollerence = 0.15;
float threshold;
float difference = 0.1;
float upperTrigger = 0.3;
float lowerTrigger = 0.2;
int c;
float idleVpp;                    //// should save to sd

bool awaitStop = 0, awaitButtonPress = 0;
int pieceCount = 0;                           //// should save to sd
int lastEdge = 0;
bool autoCountMode = 1;     /////// Auto manual mode selection   (to eeprom)
int buttonPressCount = 0;   /// If buttonpresscount is zero bak to traning mode   (//// should save to sd)
int trainingCountDown ;                                         /////// should save to sd


void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(button, INPUT_PULLUP);
  pinMode(adcPin, INPUT);
  digitalWrite(ledPin, HIGH);
  delay(900);
  Serial.begin(115200);
  /// to do   fetch saved preferences
  setTrainingMode(3);     /// call this function to start training, parameter num of training 
}

void loop() {
  ctThread();
}


void ctThread() {
  if (digitalRead(button) == 0) {
    buttonPressCount++;
    delay(10);
    if (buttonPressCount == 1) {
      digitalWrite(ledPin, HIGH);
      delay(1000);
      setIdleVpp();
      accumulatedArea = 0;
      digitalWrite(ledPin, LOW);
       }
    if (awaitButtonPress) {
      pieceCount++;  //// piece count approves only after pretrained area is reached
      awaitButtonPress = 0;
      printStats();
    } else if (trainingCountDown != 0) {
      if (buttonPressCount % 2 == 0) {
        digitalWrite(ledPin,HIGH);
        pieceCount++;  /// Take trainning piece as 1st count
        trainingCountDown--;
        printStats();
        if (trainingCountDown == 0) {
          trainnedArea = (accumulatedArea - (accumulatedArea * autoModeTollerence)) / pieceCount;
          accumulatedArea = 0;  /// reset at last
          Serial.print("\ntrainned Area-");
          Serial.println(trainnedArea);
          digitalWrite(ledPin,HIGH);
          delay(200);
          digitalWrite(ledPin,LOW);
          delay(600);
          digitalWrite(ledPin,HIGH);
          delay(200);
          digitalWrite(ledPin,LOW);
          delay(1500);
        } 
      } else  digitalWrite(ledPin,LOW);
    }
    while (digitalRead(button) == 0) { delay(10); }  //
  }




  pushToBuffer(getVpp());

  // Print peak-to-peak voltage
  Serial.println(avrVpp.get());

  //// check rising edge or falling edge
  int currentEdge = getEdge();

  if (currentEdge == -1) {  /// triggers on a falling edge and caluculate the needledown time
    accumulateAreaFlag = false;
  } else if (currentEdge == 1) {
    accumulateAreaFlag = true;
    
  }

  //accumulate area
  if (accumulateAreaFlag ) {  //// awaitstop is 1 means a previous operation may not over yet.
    float cVpp = avrVpp.get() - idleVpp;
    if (cVpp < 0) cVpp = 0;
    accumulatedArea += cVpp;
    digitalWrite(ledPin, HIGH);
  } else digitalWrite(ledPin, LOW);  /// operation traking is indicated by led


  if (accumulatedArea > trainnedArea && trainingCountDown==0)
    if (autoCountMode) {
      pieceCount++;
      printStats();
      accumulatedArea = 0;
    } else awaitButtonPress = true;  //// Accepts the button press after this area is reached
}




int getEdge() {
  float minVal = vppBuffer[0];
  float maxVal = vppBuffer[0];
  int maxIndex = 0, minIndex = 0;

  // Find minimum and maximum values in the vppBuffer
  for (int i = 0; i < edgeBuffSize; i++) {
    if (vppBuffer[i] < minVal) {
      minVal = vppBuffer[i];
      minIndex = i;
    }
    if (vppBuffer[i] > maxVal) {
      maxVal = vppBuffer[i];
      maxIndex = i;
    }
  }


  int currentEdge = 0;
  // Check for rising edge
  if (avrVpp.get() > upperTrigger) currentEdge = 1;
  else if (avrVpp.get() < lowerTrigger) currentEdge = -1;
  else if (maxVal - minVal > difference) {
    if (minIndex < maxIndex) {  ////    ....../""""""   Rising edge
      currentEdge = 1;
    } else {  ////     """"""\.....     falling edge
      currentEdge = -1;
    }
  } else
    return 0;  // if difference is 0 its Flat

  if (currentEdge == lastEdge) return 0;  /// single broadcast
  else {
    lastEdge = currentEdge;
    return currentEdge;
  }
}



float getVpp() {
  // Read ADC values into buffer
  for (int i = 0; i < vppBuffSize; i++) {
    adcValues[i] = analogRead(adcPin);
    delay(2);  // Adjust delay as needed based on sampling frequency
  }

  // Find maximum and minimum values in buffer
  int maxVal = adcValues[0];
  int minVal = adcValues[0];
  for (int i = 1; i < vppBuffSize; i++) {
    if (adcValues[i] > maxVal) {
      maxVal = adcValues[i];
    }
    if (adcValues[i] < minVal) {
      minVal = adcValues[i];
    }
  }

  // Calculate peak-to-peak voltage
  float vpp = ((maxVal - minVal) / 4095.0) * 3.3;  // Assuming 12-bit ADC and 3.3V reference voltage
  avrVpp.push(vpp);
  return avrVpp.get();
}

void setIdleVpp() {
  float a;
  for (int i = 0; i < 5; i++) {
    a += getVpp();
    delay(5);
  }
  idleVpp = a / 5;
}

void pushToBuffer(float value) {
  // If the buffer is full, shift values left
  if (currentIndex == edgeBuffSize) {
    // Shift values left by one position
    for (int i = 1; i < edgeBuffSize; i++) {
      vppBuffer[i - 1] = vppBuffer[i];
    }
    // Add the new value at the end
    vppBuffer[edgeBuffSize - 1] = value;
  } else {
    // If buffer is not full, simply add the value
    vppBuffer[currentIndex] = value;
    currentIndex++;
  }
}

void setTrainingMode(int tcd){
  buttonPressCount=0;
  trainingCountDown=tcd;
  pieceCount=0;
}



void printStats() {
  Serial.println("------Statistics------");
  Serial.print("\nPiece count-");
  Serial.print(pieceCount);
  Serial.print("\nAccumulated Area-");
  Serial.print(accumulatedArea);
  Serial.println("\n--------------------");
  delay(2500);
}
